pub use deploy_multi_send::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod deploy_multi_send {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::None,
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("IS_SCRIPT"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("IS_SCRIPT"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("run"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("run"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract MultiSend"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
            ]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::std::collections::BTreeMap::new(),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static DEPLOYMULTISEND_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(
        __abi,
    );
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\x80`@Ra\0\x0Ca\0-V[`\x07U`\t\x80T`\xFF\x19\x16`\x01\x17\x90U4\x80\x15a\0'W_\x80\xFD[Pa\x11rV[`@\x80Q`\xA0\x81\x01\x82R`\x05``\x82\x01\x81\x81Rd\x10[\x9D\x9A[`\xDA\x1B`\x80\x84\x01R\x82Razi` \x80\x84\x01\x91\x90\x91R\x83Q\x80\x85\x01\x85R`\x15\x81R\x7Fhttp://127.0.0.1:8545\0\0\0\0\0\0\0\0\0\0\0\x91\x81\x01\x91\x90\x91R\x82\x84\x01R\x91Qd\x18[\x9D\x9A[`\xDA\x1B\x81R_\x92`\x08\x91\x01\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x81Q\x81\x90a\0\xC3\x90\x82a\x0EuV[P` \x82\x01Q`\x01\x82\x01U`@\x82\x01Q`\x02\x82\x01\x90a\0\xE2\x90\x82a\x0EuV[PP`@\x80Q`\xA0\x81\x01\x82R`\x07``\x82\x01\x81\x81Rf\x12\x18\\\x99\x1A\x18]`\xCA\x1B`\x80\x84\x01R\x82Razi` \x80\x84\x01\x91\x90\x91R\x83Q\x80\x85\x01\x85R`\x15\x81R\x7Fhttp://127.0.0.1:8545\0\0\0\0\0\0\0\0\0\0\0\x91\x81\x01\x91\x90\x91R\x82\x84\x01R\x91Qf\x1A\x18\\\x99\x1A\x18]`\xCA\x1B\x81R\x90\x92P`\x08\x91\x01\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x81Q\x81\x90a\x01\x7F\x90\x82a\x0EuV[P` \x82\x01Q`\x01\x82\x01U`@\x82\x01Q`\x02\x82\x01\x90a\x01\x9E\x90\x82a\x0EuV[P\x90PP`@Q\x80``\x01`@R\x80`@Q\x80`@\x01`@R\x80`\x07\x81R` \x01f\x13XZ[\x9B\x99]`\xCA\x1B\x81RP\x81R` \x01`\x01\x81R` \x01`@Q\x80``\x01`@R\x80`=\x81R` \x01a\x1C\xEA`=\x919\x90R`@Qf\x1BXZ[\x9B\x99]`\xCA\x1B\x81R`\x08\x90`\x07\x01\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x81Q\x81\x90a\x02'\x90\x82a\x0EuV[P` \x82\x01Q`\x01\x82\x01U`@\x82\x01Q`\x02\x82\x01\x90a\x02F\x90\x82a\x0EuV[P\x90PP`@Q\x80``\x01`@R\x80`@Q\x80`@\x01`@R\x80`\x06\x81R` \x01eGoerli`\xD0\x1B\x81RP\x81R` \x01`\x05\x81R` \x01`@Q\x80``\x01`@R\x80`<\x81R` \x01a\x1D'`<\x919\x90R`@Qegoerli`\xD0\x1B\x81R`\x08\x90`\x06\x01\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x81Q\x81\x90a\x02\xCD\x90\x82a\x0EuV[P` \x82\x01Q`\x01\x82\x01U`@\x82\x01Q`\x02\x82\x01\x90a\x02\xEC\x90\x82a\x0EuV[PP`@\x80Q`\xA0\x81\x01\x82R`\x07``\x82\x01\x81\x81RfSepolia`\xC8\x1B`\x80\x84\x01R\x82Rb\xAA6\xA7` \x80\x84\x01\x91\x90\x91R\x83Q\x80\x85\x01\x85R`\x17\x81R\x7Fhttps://rpc.sepolia.dev\0\0\0\0\0\0\0\0\0\x91\x81\x01\x91\x90\x91R\x82\x84\x01R\x91Qfsepolia`\xC8\x1B\x81R\x90\x92P`\x08\x91\x01\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x81Q\x81\x90a\x03\x8A\x90\x82a\x0EuV[P` \x82\x01Q`\x01\x82\x01U`@\x82\x01Q`\x02\x82\x01\x90a\x03\xA9\x90\x82a\x0EuV[PP`@\x80Q`\xA0\x81\x01\x82R`\x08``\x82\x01\x81\x81RgOptimism`\xC0\x1B`\x80\x84\x01R\x82R`\n` \x80\x84\x01\x91\x90\x91R\x83Q\x80\x85\x01\x85R`\x1B\x81R\x7Fhttps://mainnet.optimism.io\0\0\0\0\0\x91\x81\x01\x91\x90\x91R\x82\x84\x01R\x91Qgoptimism`\xC0\x1B\x81R\x90\x92P\x81\x01\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x81Q\x81\x90a\x04E\x90\x82a\x0EuV[P` \x82\x01Q`\x01\x82\x01U`@\x82\x01Q`\x02\x82\x01\x90a\x04d\x90\x82a\x0EuV[PP`@\x80Q`\xA0\x81\x01\x82R`\x0F``\x82\x01\x81\x81RnOptimism Goerli`\x88\x1B`\x80\x84\x01R\x82Ra\x01\xA4` \x80\x84\x01\x91\x90\x91R\x83Q\x80\x85\x01\x85R`\x1A\x81R\x7Fhttps://goerli.optimism.io\0\0\0\0\0\0\x91\x81\x01\x91\x90\x91R\x82\x84\x01R\x91Qnoptimism_goerli`\x88\x1B\x81R\x90\x92P`\x08\x91\x01\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x81Q\x81\x90a\x05\x11\x90\x82a\x0EuV[P` \x82\x01Q`\x01\x82\x01U`@\x82\x01Q`\x02\x82\x01\x90a\x050\x90\x82a\x0EuV[PP`@\x80Q`\xA0\x81\x01\x82R`\x0C``\x82\x01\x81\x81RkArbitrum One`\xA0\x1B`\x80\x84\x01R\x82Ra\xA4\xB1` \x80\x84\x01\x91\x90\x91R\x83Q\x80\x85\x01\x85R`\x1C\x81R\x7Fhttps://arb1.arbitrum.io/rpc\0\0\0\0\x91\x81\x01\x91\x90\x91R\x82\x84\x01R\x91Qkarbitrum_one`\xA0\x1B\x81R\x90\x92P`\x08\x91\x01\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x81Q\x81\x90a\x05\xD7\x90\x82a\x0EuV[P` \x82\x01Q`\x01\x82\x01U`@\x82\x01Q`\x02\x82\x01\x90a\x05\xF6\x90\x82a\x0EuV[P\x90PP`@Q\x80``\x01`@R\x80`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FArbitrum One Goerli\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x81R` \x01b\x06n\xED\x81R` \x01`@Q\x80``\x01`@R\x80`%\x81R` \x01a\x1Dc`%\x919\x90R`@Q\x7Farbitrum_one_goerli\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x08\x90`\x13\x01\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x81Q\x81\x90a\x06\xAD\x90\x82a\x0EuV[P` \x82\x01Q`\x01\x82\x01U`@\x82\x01Q`\x02\x82\x01\x90a\x06\xCC\x90\x82a\x0EuV[PP`@\x80Q`\xA0\x81\x01\x82R`\r``\x82\x01\x81\x81RlArbitrum Nova`\x98\x1B`\x80\x84\x01R\x82Ra\xA4\xBA` \x80\x84\x01\x91\x90\x91R\x83Q\x80\x85\x01\x85R`\x1C\x81R\x7Fhttps://nova.arbitrum.io/rpc\0\0\0\0\x91\x81\x01\x91\x90\x91R\x82\x84\x01R\x91Qlarbitrum_nova`\x98\x1B\x81R\x90\x92P`\x08\x91\x01\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x81Q\x81\x90a\x07u\x90\x82a\x0EuV[P` \x82\x01Q`\x01\x82\x01U`@\x82\x01Q`\x02\x82\x01\x90a\x07\x94\x90\x82a\x0EuV[PP`@\x80Q`\xA0\x81\x01\x82R`\x07``\x82\x01\x81\x81Rf(7\xB6<\xB3\xB7\xB7`\xC9\x1B`\x80\x84\x01R\x82R`\x89` \x80\x84\x01\x91\x90\x91R\x83Q\x80\x85\x01\x85R`\x17\x81R\x7Fhttps://polygon-rpc.com\0\0\0\0\0\0\0\0\0\x91\x81\x01\x91\x90\x91R\x82\x84\x01R\x91Qf87\xB6<\xB3\xB7\xB7`\xC9\x1B\x81R\x90\x92P`\x08\x91\x01\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x81Q\x81\x90a\x080\x90\x82a\x0EuV[P` \x82\x01Q`\x01\x82\x01U`@\x82\x01Q`\x02\x82\x01\x90a\x08O\x90\x82a\x0EuV[PP`@\x80Q`\xA0\x81\x01\x82R`\x0E``\x82\x01\x81\x81RmPolygon Mumbai`\x90\x1B`\x80\x84\x01R\x82Rb\x018\x81` \x80\x84\x01\x91\x90\x91R\x83Q\x80\x85\x01\x85R`\x1E\x81R\x7Fhttps://rpc-mumbai.matic.today\0\0\x91\x81\x01\x91\x90\x91R\x82\x84\x01R\x91Qmpolygon_mumbai`\x90\x1B\x81R\x90\x92P`\x08\x91\x01\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x81Q\x81\x90a\x08\xFB\x90\x82a\x0EuV[P` \x82\x01Q`\x01\x82\x01U`@\x82\x01Q`\x02\x82\x01\x90a\t\x1A\x90\x82a\x0EuV[P\x90PP`@Q\x80``\x01`@R\x80`@Q\x80`@\x01`@R\x80`\t\x81R` \x01hAvalanche`\xB8\x1B\x81RP\x81R` \x01a\xA8j\x81R` \x01`@Q\x80``\x01`@R\x80`%\x81R` \x01a\x1C\xC5`%\x919\x90R`@Qhavalanche`\xB8\x1B\x81R`\x08\x90`\t\x01\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x81Q\x81\x90a\t\xA8\x90\x82a\x0EuV[P` \x82\x01Q`\x01\x82\x01U`@\x82\x01Q`\x02\x82\x01\x90a\t\xC7\x90\x82a\x0EuV[P\x90PP`@Q\x80``\x01`@R\x80`@Q\x80`@\x01`@R\x80`\x0E\x81R` \x01mAvalanche Fuji`\x90\x1B\x81RP\x81R` \x01a\xA8i\x81R` \x01`@Q\x80``\x01`@R\x80`*\x81R` \x01a\x1D\x88`*\x919\x90R`@Qmavalanche_fuji`\x90\x1B\x81R`\x08\x90`\x0E\x01\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x81Q\x81\x90a\n_\x90\x82a\x0EuV[P` \x82\x01Q`\x01\x82\x01U`@\x82\x01Q`\x02\x82\x01\x90a\n~\x90\x82a\x0EuV[P\x90PP`@Q\x80``\x01`@R\x80`@Q\x80`@\x01`@R\x80`\x0F\x81R` \x01n!'!\x10)\xB6\xB0\xB9:\x10!\xB40\xB4\xB7`\x89\x1B\x81RP\x81R` \x01`8\x81R` \x01`@Q\x80``\x01`@R\x80`!\x81R` \x01a\x1D\xB2`!\x919\x90R`@Qn171/\xB9\xB6\xB0\xB9:/\xB1\xB40\xB4\xB7`\x89\x1B\x81R`\x08\x90`\x0F\x01\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x81Q\x81\x90a\x0B\x17\x90\x82a\x0EuV[P` \x82\x01Q`\x01\x82\x01U`@\x82\x01Q`\x02\x82\x01\x90a\x0B6\x90\x82a\x0EuV[P\x90PP`@Q\x80``\x01`@R\x80`@Q\x80`@\x01`@R\x80`\x17\x81R` \x01\x7FBNB Smart Chain Testnet\0\0\0\0\0\0\0\0\0\x81RP\x81R` \x01`a\x81R` \x01`@Q\x80``\x01`@R\x80`.\x81R` \x01a\x1C\x97`.\x919\x90R`@Q\x7Fbnb_smart_chain_testnet\0\0\0\0\0\0\0\0\0\x81R`\x08\x90`\x17\x01\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x81Q\x81\x90a\x0B\xEB\x90\x82a\x0EuV[P` \x82\x01Q`\x01\x82\x01U`@\x82\x01Q`\x02\x82\x01\x90a\x0C\n\x90\x82a\x0EuV[PP`@\x80Q`\xA0\x81\x01\x82R`\x0C``\x82\x01\x81\x81Rk#\xB77\xB9\xB4\xB9\x90!\xB40\xB4\xB7`\xA1\x1B`\x80\x84\x01R\x82R`d` \x80\x84\x01\x91\x90\x91R\x83Q\x80\x85\x01\x85R`\x1B\x81R\x7Fhttps://rpc.gnosischain.com\0\0\0\0\0\x91\x81\x01\x91\x90\x91R\x82\x84\x01R\x91Qk3\xB77\xB9\xB4\xB9\xAF\xB1\xB40\xB4\xB7`\xA1\x1B\x81R\x90\x92P`\x08\x91\x01\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x81Q\x81\x90a\x0C\xB0\x90\x82a\x0EuV[P` \x82\x01Q`\x01\x82\x01U`@\x82\x01Q`\x02\x82\x01\x90a\x0C\xCF\x90\x82a\x0EuV[P\x90PP_\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\x9D*\xD7*`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\r1W=_\x80>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\rX\x91\x90\x81\x01\x90a\x10\x11V[\x90P_[\x81Q\x81\x10\x15a\r\xD5W\x81\x81\x81Q\x81\x10a\rwWa\rwa\x11CV[` \x02` \x01\x01Q` \x01Q`\x08\x83\x83\x81Q\x81\x10a\r\x97Wa\r\x97a\x11CV[` \x02` \x01\x01Q_\x01Q`@Qa\r\xAF\x91\x90a\x11WV[\x90\x81R` \x01`@Q\x80\x91\x03\x90 `\x02\x01\x90\x81a\r\xCC\x91\x90a\x0EuV[P`\x01\x01a\r\\V[P_\x91PP\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x0E\x05W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x0E#WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x0EpW\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x0ENWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x0EmW_\x81U`\x01\x01a\x0EZV[PP[PPPV[\x81Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x0E\x8EWa\x0E\x8Ea\r\xDDV[a\x0E\xA2\x81a\x0E\x9C\x84Ta\r\xF1V[\x84a\x0E)V[` `\x1F\x82\x11`\x01\x81\x14a\x0E\xD4W_\x83\x15a\x0E\xBDWP\x84\x82\x01Q[_\x19`\x03\x85\x90\x1B\x1C\x19\x16`\x01\x84\x90\x1B\x17\x84Ua\x0EmV[_\x84\x81R` \x81 `\x1F\x19\x85\x16\x91[\x82\x81\x10\x15a\x0F\x03W\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x0E\xE3V[P\x84\x82\x10\x15a\x0F W\x86\x84\x01Q_\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[`@\x80Q\x90\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a\x0FQWa\x0FQa\r\xDDV[`@R\x90V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a\x0F\x7FWa\x0F\x7Fa\r\xDDV[`@R\x91\x90PV[_[\x83\x81\x10\x15a\x0F\xA1W\x81\x81\x01Q\x83\x82\x01R` \x01a\x0F\x89V[PP_\x91\x01RV[_\x82`\x1F\x83\x01\x12a\x0F\xB8W_\x80\xFD[\x81Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x0F\xD1Wa\x0F\xD1a\r\xDDV[a\x0F\xE4`\x1F\x82\x01`\x1F\x19\x16` \x01a\x0FWV[\x81\x81R\x84` \x83\x86\x01\x01\x11\x15a\x0F\xF8W_\x80\xFD[a\x10\t\x82` \x83\x01` \x87\x01a\x0F\x87V[\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a\x10!W_\x80\xFD[\x81Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x106W_\x80\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x10FW_\x80\xFD[\x80Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x10_Wa\x10_a\r\xDDV[\x80`\x05\x1Ba\x10o` \x82\x01a\x0FWV[\x91\x82R` \x81\x84\x01\x81\x01\x92\x90\x81\x01\x90\x87\x84\x11\x15a\x10\x8AW_\x80\xFD[` \x85\x01\x92P[\x83\x83\x10\x15a\x118W\x82Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x10\xAEW_\x80\xFD[\x85\x01`@\x81\x8A\x03`\x1F\x19\x01\x12\x15a\x10\xC3W_\x80\xFD[a\x10\xCBa\x0F/V[` \x82\x01Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x10\xE3W_\x80\xFD[a\x10\xF2\x8B` \x83\x86\x01\x01a\x0F\xA9V[\x82RP`@\x82\x01Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x11\rW_\x80\xFD[a\x11\x1C\x8B` \x83\x86\x01\x01a\x0F\xA9V[` \x83\x01RP\x80\x84RPP` \x82\x01\x91P` \x83\x01\x92Pa\x10\x91V[\x97\x96PPPPPPPV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x82Qa\x11h\x81\x84` \x87\x01a\x0F\x87V[\x91\x90\x91\x01\x92\x91PPV[a\x0B\x18\x80a\x11\x7F_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\xC0@b&\x14a\08W\x80c\xF8\xCC\xBFG\x14a\0]W[_\x80\xFD[a\0@a\0zV[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[`\tTa\0j\x90`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\0TV[_\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\0\xD5W_\x80\xFD[PZ\xF1\x15\x80\x15a\0\xE7W=_\x80>=_\xFD[PPPP_`@Qa\0\xF8\x90a\x01\x8AV[`@Q\x80\x91\x03\x90_\xF0\x80\x15\x80\x15a\x01\x11W=_\x80>=_\xFD[P\x90P\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01nW_\x80\xFD[PZ\xF1\x15\x80\x15a\x01\x80W=_\x80>=_\xFD[P\x92\x94\x93PPPPV[a\tK\x80a\x01\x98\x839\x01\x90V\xFE`\x80`@R4\x80\x15`\x0EW_\x80\xFD[Pa\t/\x80a\0\x1C_9_\xF3\xFE`\x80`@R`\x046\x10a\0(W_5`\xE0\x1C\x80c\x80\x86$y\x14a\0,W\x80c\xFC\x13?]\x14a\0AW[_\x80\xFD[a\0?a\0:6`\x04a\x06\xBAV[a\0`V[\0[4\x80\x15a\0LW_\x80\xFD[Pa\0?a\0[6`\x04a\x07\x7FV[a\x02SV[\x80Q\x82Q3\x91\x14a\0\xA8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01Rl\x1A[\x9D\x98[\x1AY\x08\x1A[\x9C\x1D]`\x9A\x1B`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[`\xFF\x83Q\x11\x15a\0\xEFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01Rq\x19^\x18\xD9YY\x08\x1BX^\x08\x18[\x1B\x1B\xDD\xD9Y`r\x1B`D\x82\x01R`d\x01a\0\x9FV[_\x80[\x84Q\x81`\xFF\x16\x10\x15a\x02\nW_\x85\x82`\xFF\x16\x81Q\x81\x10a\x01\x14Wa\x01\x14a\x08UV[` \x02` \x01\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x85\x83`\xFF\x16\x81Q\x81\x10a\x01:Wa\x01:a\x08UV[` \x02` \x01\x01Q`@Q_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x01\x7FW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x01\x84V[``\x91P[PP\x90P\x80a\x01\xCCW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01Rs#0\xB4\xB62\xB2\x10:7\x909\xB2\xB72\x10\"\xBA42\xB9`a\x1B`D\x82\x01R`d\x01a\0\x9FV[\x84\x82`\xFF\x16\x81Q\x81\x10a\x01\xE1Wa\x01\xE1a\x08UV[` \x02` \x01\x01Q\x83a\x01\xF4\x91\x90a\x08}V[\x92PP\x80\x80a\x02\x02\x90a\x08\x90V[\x91PPa\0\xF2V[P`@\x80Q`\x01`\x01`\xA0\x1B\x03\x84\x16\x81R` \x81\x01\x83\x90R\x7F\xBF\x91\rv\x7F\x89\xAA\xD95\0\xE3\x0B\x9D}g\x86e\xB6v:\x16er\nwVlBh\xB8\xDE\x1F\x91\x01`@Q\x80\x91\x03\x90\xA1PPPPV[\x80Q\x82Q3\x91\x14a\x02\x96W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01Rl\x1A[\x9D\x98[\x1AY\x08\x1A[\x9C\x1D]`\x9A\x1B`D\x82\x01R`d\x01a\0\x9FV[`\xFF\x83Q\x11\x15a\x02\xDDW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01Rq\x19^\x18\xD9YY\x08\x1BX^\x08\x18[\x1B\x1B\xDD\xD9Y`r\x1B`D\x82\x01R`d\x01a\0\x9FV[\x83_\x80[\x85Q\x81`\xFF\x16\x10\x15a\x03\x81Wa\x03E\x84\x87\x83`\xFF\x16\x81Q\x81\x10a\x03\x06Wa\x03\x06a\x08UV[` \x02` \x01\x01Q\x87\x84`\xFF\x16\x81Q\x81\x10a\x03#Wa\x03#a\x08UV[` \x02` \x01\x01Q\x86`\x01`\x01`\xA0\x1B\x03\x16a\x03\xD5\x90\x93\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x84\x81`\xFF\x16\x81Q\x81\x10a\x03ZWa\x03Za\x08UV[` \x02` \x01\x01Q\x82a\x03m\x91\x90a\x08}V[\x91P\x80a\x03y\x81a\x08\x90V[\x91PPa\x02\xE1V[P`@\x80Q`\x01`\x01`\xA0\x1B\x03\x80\x89\x16\x82R\x85\x16` \x82\x01R\x90\x81\x01\x82\x90R\x7F\xE0\xEBz\xA3\x19\xC1\x08\xB4\xAA\xE8$\xC2\x81J\xDD\\m'\xDD\xA4\x06\x1DNV\xFD\x07\xEB\x98\x92\xC9\xFB+\x90``\x01`@Q\x80\x91\x03\x90\xA1PPPPPPV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x85\x81\x16`$\x83\x01R\x84\x16`D\x82\x01R`d\x80\x82\x01\x84\x90R\x82Q\x80\x83\x03\x90\x91\x01\x81R`\x84\x90\x91\x01\x90\x91R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c#\xB8r\xDD`\xE0\x1B\x17\x90Ra\x04/\x90\x85\x90a\x045V[PPPPV[_a\x04I`\x01`\x01`\xA0\x1B\x03\x84\x16\x83a\x04\x9BV[\x90P\x80Q_\x14\x15\x80\x15a\x04mWP\x80\x80` \x01\x90Q\x81\x01\x90a\x04k\x91\x90a\x08\xAEV[\x15[\x15a\x04\x96W`@QcRt\xAF\xE7`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x84\x16`\x04\x82\x01R`$\x01a\0\x9FV[PPPV[``a\x04\xA8\x83\x83_a\x04\xB1V[\x90P[\x92\x91PPV[``\x81G\x10\x15a\x04\xD6W`@Qc\xCDx`Y`\xE0\x1B\x81R0`\x04\x82\x01R`$\x01a\0\x9FV[_\x80\x85`\x01`\x01`\xA0\x1B\x03\x16\x84\x86`@Qa\x04\xF1\x91\x90a\x08\xCDV[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x05+W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x050V[``\x91P[P\x91P\x91Pa\x05@\x86\x83\x83a\x05LV[\x92PPP[\x93\x92PPPV[``\x82a\x05aWa\x05\\\x82a\x05\xA8V[a\x05EV[\x81Q\x15\x80\x15a\x05xWP`\x01`\x01`\xA0\x1B\x03\x84\x16;\x15[\x15a\x05\xA1W`@Qc\x99\x96\xB3\x15`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16`\x04\x82\x01R`$\x01a\0\x9FV[P\x80a\x05EV[\x80Q\x15a\x05\xB8W\x80Q\x80\x82` \x01\xFD[`@Qc\n\x12\xF5!`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x06\x11Wa\x06\x11a\x05\xD4V[`@R\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x062Wa\x062a\x05\xD4V[P`\x05\x1B` \x01\x90V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x05\xD1W_\x80\xFD[_\x82`\x1F\x83\x01\x12a\x06_W_\x80\xFD[\x815a\x06ra\x06m\x82a\x06\x19V[a\x05\xE8V[\x80\x82\x82R` \x82\x01\x91P` \x83`\x05\x1B\x86\x01\x01\x92P\x85\x83\x11\x15a\x06\x93W_\x80\xFD[` \x85\x01[\x83\x81\x10\x15a\x06\xB0W\x805\x83R` \x92\x83\x01\x92\x01a\x06\x98V[P\x95\x94PPPPPV[_\x80`@\x83\x85\x03\x12\x15a\x06\xCBW_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06\xE1W_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x06\xF1W_\x80\xFD[\x805a\x06\xFFa\x06m\x82a\x06\x19V[\x80\x82\x82R` \x82\x01\x91P` \x83`\x05\x1B\x85\x01\x01\x92P\x87\x83\x11\x15a\x07 W_\x80\xFD[` \x84\x01\x93P[\x82\x84\x10\x15a\x07KW\x835a\x07:\x81a\x06<V[\x82R` \x93\x84\x01\x93\x90\x91\x01\x90a\x07'V[\x94PPPP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07iW_\x80\xFD[a\x07u\x85\x82\x86\x01a\x06PV[\x91PP\x92P\x92\x90PV[_\x80_``\x84\x86\x03\x12\x15a\x07\x91W_\x80\xFD[\x835a\x07\x9C\x81a\x06<V[\x92P` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\xB7W_\x80\xFD[\x84\x01`\x1F\x81\x01\x86\x13a\x07\xC7W_\x80\xFD[\x805a\x07\xD5a\x06m\x82a\x06\x19V[\x80\x82\x82R` \x82\x01\x91P` \x83`\x05\x1B\x85\x01\x01\x92P\x88\x83\x11\x15a\x07\xF6W_\x80\xFD[` \x84\x01\x93P[\x82\x84\x10\x15a\x08!W\x835a\x08\x10\x81a\x06<V[\x82R` \x93\x84\x01\x93\x90\x91\x01\x90a\x07\xFDV[\x94PPPP`@\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08?W_\x80\xFD[a\x08K\x86\x82\x87\x01a\x06PV[\x91PP\x92P\x92P\x92V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x04\xABWa\x04\xABa\x08iV[_`\xFF\x82\x16`\xFF\x81\x03a\x08\xA5Wa\x08\xA5a\x08iV[`\x01\x01\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x08\xBEW_\x80\xFD[\x81Q\x80\x15\x15\x81\x14a\x05EW_\x80\xFD[_\x82Q_[\x81\x81\x10\x15a\x08\xECW` \x81\x86\x01\x81\x01Q\x85\x83\x01R\x01a\x08\xD2V[P_\x92\x01\x91\x82RP\x91\x90PV\xFE\xA2dipfsX\"\x12 \xFF\xB1\x89\x95\xCEu_\xE9)\x02\xF7C8+v|z$s~\xC5v\xA8\xD2\xE7\xA1\x92H\xBC\xCB\x80\xEBdsolcC\0\x08\x1A\x003\xA2dipfsX\"\x12 \xE2#\x83\xF4H\xE1\x14\xC5\xF89t\xD6;>\xAD\xC4\xD4\xC8F\"\x05\xB4[\x14\x88\x9CmG\x1D\xF7\x87\xA1dsolcC\0\x08\x1A\x003https://data-seed-prebsc-1-s1.binance.org:8545https://api.avax.network/ext/bc/C/rpchttps://mainnet.infura.io/v3/6770454bc6ea42c58aac12978531b93fhttps://goerli.infura.io/v3/6770454bc6ea42c58aac12978531b93fhttps://goerli-rollup.arbitrum.io/rpchttps://api.avax-test.network/ext/bc/C/rpchttps://bsc-dataseed1.binance.org";
    /// The bytecode of the contract.
    pub static DEPLOYMULTISEND_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\xC0@b&\x14a\08W\x80c\xF8\xCC\xBFG\x14a\0]W[_\x80\xFD[a\0@a\0zV[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[`\tTa\0j\x90`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\0TV[_\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\0\xD5W_\x80\xFD[PZ\xF1\x15\x80\x15a\0\xE7W=_\x80>=_\xFD[PPPP_`@Qa\0\xF8\x90a\x01\x8AV[`@Q\x80\x91\x03\x90_\xF0\x80\x15\x80\x15a\x01\x11W=_\x80>=_\xFD[P\x90P\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01nW_\x80\xFD[PZ\xF1\x15\x80\x15a\x01\x80W=_\x80>=_\xFD[P\x92\x94\x93PPPPV[a\tK\x80a\x01\x98\x839\x01\x90V\xFE`\x80`@R4\x80\x15`\x0EW_\x80\xFD[Pa\t/\x80a\0\x1C_9_\xF3\xFE`\x80`@R`\x046\x10a\0(W_5`\xE0\x1C\x80c\x80\x86$y\x14a\0,W\x80c\xFC\x13?]\x14a\0AW[_\x80\xFD[a\0?a\0:6`\x04a\x06\xBAV[a\0`V[\0[4\x80\x15a\0LW_\x80\xFD[Pa\0?a\0[6`\x04a\x07\x7FV[a\x02SV[\x80Q\x82Q3\x91\x14a\0\xA8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01Rl\x1A[\x9D\x98[\x1AY\x08\x1A[\x9C\x1D]`\x9A\x1B`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[`\xFF\x83Q\x11\x15a\0\xEFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01Rq\x19^\x18\xD9YY\x08\x1BX^\x08\x18[\x1B\x1B\xDD\xD9Y`r\x1B`D\x82\x01R`d\x01a\0\x9FV[_\x80[\x84Q\x81`\xFF\x16\x10\x15a\x02\nW_\x85\x82`\xFF\x16\x81Q\x81\x10a\x01\x14Wa\x01\x14a\x08UV[` \x02` \x01\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x85\x83`\xFF\x16\x81Q\x81\x10a\x01:Wa\x01:a\x08UV[` \x02` \x01\x01Q`@Q_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x01\x7FW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x01\x84V[``\x91P[PP\x90P\x80a\x01\xCCW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01Rs#0\xB4\xB62\xB2\x10:7\x909\xB2\xB72\x10\"\xBA42\xB9`a\x1B`D\x82\x01R`d\x01a\0\x9FV[\x84\x82`\xFF\x16\x81Q\x81\x10a\x01\xE1Wa\x01\xE1a\x08UV[` \x02` \x01\x01Q\x83a\x01\xF4\x91\x90a\x08}V[\x92PP\x80\x80a\x02\x02\x90a\x08\x90V[\x91PPa\0\xF2V[P`@\x80Q`\x01`\x01`\xA0\x1B\x03\x84\x16\x81R` \x81\x01\x83\x90R\x7F\xBF\x91\rv\x7F\x89\xAA\xD95\0\xE3\x0B\x9D}g\x86e\xB6v:\x16er\nwVlBh\xB8\xDE\x1F\x91\x01`@Q\x80\x91\x03\x90\xA1PPPPV[\x80Q\x82Q3\x91\x14a\x02\x96W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01Rl\x1A[\x9D\x98[\x1AY\x08\x1A[\x9C\x1D]`\x9A\x1B`D\x82\x01R`d\x01a\0\x9FV[`\xFF\x83Q\x11\x15a\x02\xDDW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01Rq\x19^\x18\xD9YY\x08\x1BX^\x08\x18[\x1B\x1B\xDD\xD9Y`r\x1B`D\x82\x01R`d\x01a\0\x9FV[\x83_\x80[\x85Q\x81`\xFF\x16\x10\x15a\x03\x81Wa\x03E\x84\x87\x83`\xFF\x16\x81Q\x81\x10a\x03\x06Wa\x03\x06a\x08UV[` \x02` \x01\x01Q\x87\x84`\xFF\x16\x81Q\x81\x10a\x03#Wa\x03#a\x08UV[` \x02` \x01\x01Q\x86`\x01`\x01`\xA0\x1B\x03\x16a\x03\xD5\x90\x93\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x84\x81`\xFF\x16\x81Q\x81\x10a\x03ZWa\x03Za\x08UV[` \x02` \x01\x01Q\x82a\x03m\x91\x90a\x08}V[\x91P\x80a\x03y\x81a\x08\x90V[\x91PPa\x02\xE1V[P`@\x80Q`\x01`\x01`\xA0\x1B\x03\x80\x89\x16\x82R\x85\x16` \x82\x01R\x90\x81\x01\x82\x90R\x7F\xE0\xEBz\xA3\x19\xC1\x08\xB4\xAA\xE8$\xC2\x81J\xDD\\m'\xDD\xA4\x06\x1DNV\xFD\x07\xEB\x98\x92\xC9\xFB+\x90``\x01`@Q\x80\x91\x03\x90\xA1PPPPPPV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x85\x81\x16`$\x83\x01R\x84\x16`D\x82\x01R`d\x80\x82\x01\x84\x90R\x82Q\x80\x83\x03\x90\x91\x01\x81R`\x84\x90\x91\x01\x90\x91R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c#\xB8r\xDD`\xE0\x1B\x17\x90Ra\x04/\x90\x85\x90a\x045V[PPPPV[_a\x04I`\x01`\x01`\xA0\x1B\x03\x84\x16\x83a\x04\x9BV[\x90P\x80Q_\x14\x15\x80\x15a\x04mWP\x80\x80` \x01\x90Q\x81\x01\x90a\x04k\x91\x90a\x08\xAEV[\x15[\x15a\x04\x96W`@QcRt\xAF\xE7`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x84\x16`\x04\x82\x01R`$\x01a\0\x9FV[PPPV[``a\x04\xA8\x83\x83_a\x04\xB1V[\x90P[\x92\x91PPV[``\x81G\x10\x15a\x04\xD6W`@Qc\xCDx`Y`\xE0\x1B\x81R0`\x04\x82\x01R`$\x01a\0\x9FV[_\x80\x85`\x01`\x01`\xA0\x1B\x03\x16\x84\x86`@Qa\x04\xF1\x91\x90a\x08\xCDV[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x05+W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x050V[``\x91P[P\x91P\x91Pa\x05@\x86\x83\x83a\x05LV[\x92PPP[\x93\x92PPPV[``\x82a\x05aWa\x05\\\x82a\x05\xA8V[a\x05EV[\x81Q\x15\x80\x15a\x05xWP`\x01`\x01`\xA0\x1B\x03\x84\x16;\x15[\x15a\x05\xA1W`@Qc\x99\x96\xB3\x15`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16`\x04\x82\x01R`$\x01a\0\x9FV[P\x80a\x05EV[\x80Q\x15a\x05\xB8W\x80Q\x80\x82` \x01\xFD[`@Qc\n\x12\xF5!`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x06\x11Wa\x06\x11a\x05\xD4V[`@R\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x062Wa\x062a\x05\xD4V[P`\x05\x1B` \x01\x90V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x05\xD1W_\x80\xFD[_\x82`\x1F\x83\x01\x12a\x06_W_\x80\xFD[\x815a\x06ra\x06m\x82a\x06\x19V[a\x05\xE8V[\x80\x82\x82R` \x82\x01\x91P` \x83`\x05\x1B\x86\x01\x01\x92P\x85\x83\x11\x15a\x06\x93W_\x80\xFD[` \x85\x01[\x83\x81\x10\x15a\x06\xB0W\x805\x83R` \x92\x83\x01\x92\x01a\x06\x98V[P\x95\x94PPPPPV[_\x80`@\x83\x85\x03\x12\x15a\x06\xCBW_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06\xE1W_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x06\xF1W_\x80\xFD[\x805a\x06\xFFa\x06m\x82a\x06\x19V[\x80\x82\x82R` \x82\x01\x91P` \x83`\x05\x1B\x85\x01\x01\x92P\x87\x83\x11\x15a\x07 W_\x80\xFD[` \x84\x01\x93P[\x82\x84\x10\x15a\x07KW\x835a\x07:\x81a\x06<V[\x82R` \x93\x84\x01\x93\x90\x91\x01\x90a\x07'V[\x94PPPP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07iW_\x80\xFD[a\x07u\x85\x82\x86\x01a\x06PV[\x91PP\x92P\x92\x90PV[_\x80_``\x84\x86\x03\x12\x15a\x07\x91W_\x80\xFD[\x835a\x07\x9C\x81a\x06<V[\x92P` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\xB7W_\x80\xFD[\x84\x01`\x1F\x81\x01\x86\x13a\x07\xC7W_\x80\xFD[\x805a\x07\xD5a\x06m\x82a\x06\x19V[\x80\x82\x82R` \x82\x01\x91P` \x83`\x05\x1B\x85\x01\x01\x92P\x88\x83\x11\x15a\x07\xF6W_\x80\xFD[` \x84\x01\x93P[\x82\x84\x10\x15a\x08!W\x835a\x08\x10\x81a\x06<V[\x82R` \x93\x84\x01\x93\x90\x91\x01\x90a\x07\xFDV[\x94PPPP`@\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08?W_\x80\xFD[a\x08K\x86\x82\x87\x01a\x06PV[\x91PP\x92P\x92P\x92V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x04\xABWa\x04\xABa\x08iV[_`\xFF\x82\x16`\xFF\x81\x03a\x08\xA5Wa\x08\xA5a\x08iV[`\x01\x01\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x08\xBEW_\x80\xFD[\x81Q\x80\x15\x15\x81\x14a\x05EW_\x80\xFD[_\x82Q_[\x81\x81\x10\x15a\x08\xECW` \x81\x86\x01\x81\x01Q\x85\x83\x01R\x01a\x08\xD2V[P_\x92\x01\x91\x82RP\x91\x90PV\xFE\xA2dipfsX\"\x12 \xFF\xB1\x89\x95\xCEu_\xE9)\x02\xF7C8+v|z$s~\xC5v\xA8\xD2\xE7\xA1\x92H\xBC\xCB\x80\xEBdsolcC\0\x08\x1A\x003\xA2dipfsX\"\x12 \xE2#\x83\xF4H\xE1\x14\xC5\xF89t\xD6;>\xAD\xC4\xD4\xC8F\"\x05\xB4[\x14\x88\x9CmG\x1D\xF7\x87\xA1dsolcC\0\x08\x1A\x003";
    /// The deployed bytecode of the contract.
    pub static DEPLOYMULTISEND_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct DeployMultiSend<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for DeployMultiSend<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for DeployMultiSend<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for DeployMultiSend<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for DeployMultiSend<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(DeployMultiSend))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> DeployMultiSend<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    DEPLOYMULTISEND_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                DEPLOYMULTISEND_ABI.clone(),
                DEPLOYMULTISEND_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `IS_SCRIPT` (0xf8ccbf47) function
        pub fn is_script(&self) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([248, 204, 191, 71], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `run` (0xc0406226) function
        pub fn run(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([192, 64, 98, 38], ())
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for DeployMultiSend<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "IS_SCRIPT", abi = "IS_SCRIPT()")]
    pub struct IsScriptCall;
    ///Container type for all input parameters for the `run` function with signature `run()` and selector `0xc0406226`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "run", abi = "run()")]
    pub struct RunCall;
    ///Container type for all of the contract's call
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        serde::Serialize,
        serde::Deserialize,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub enum DeployMultiSendCalls {
        IsScript(IsScriptCall),
        Run(RunCall),
    }
    impl ::ethers::core::abi::AbiDecode for DeployMultiSendCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <IsScriptCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::IsScript(decoded));
            }
            if let Ok(decoded) = <RunCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Run(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for DeployMultiSendCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::IsScript(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Run(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for DeployMultiSendCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::IsScript(element) => ::core::fmt::Display::fmt(element, f),
                Self::Run(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<IsScriptCall> for DeployMultiSendCalls {
        fn from(value: IsScriptCall) -> Self {
            Self::IsScript(value)
        }
    }
    impl ::core::convert::From<RunCall> for DeployMultiSendCalls {
        fn from(value: RunCall) -> Self {
            Self::Run(value)
        }
    }
    ///Container type for all return fields from the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct IsScriptReturn(pub bool);
    ///Container type for all return fields from the `run` function with signature `run()` and selector `0xc0406226`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct RunReturn(pub ::ethers::core::types::Address);
}
